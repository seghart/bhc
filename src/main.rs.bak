mod readfiles;
mod ssh;
mod cli;
use tokio;
use ssh::rsssh;

fn convert_config(user_config: Vec<readfiles::user::Config>) -> Vec<rsssh::Config> {
    user_config.into_iter().map(|c| rsssh::Config {
        ip: c.ip,
        port: c.port,
        user: c.user,
        password: c.password,
    }).collect()
}

fn convert_comm(command_comm: Vec<readfiles::command::Comm>) -> Vec<rsssh::Comm> {
    command_comm.into_iter().map(|c| rsssh::Comm {
        command: c.command,
    }).collect()
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
    let cli = cli::cli_run::Cli::cmd();

    // 从文件中读取配置和命令
    let user_configs = readfiles::user::read_config_file(&cli.get_conn_path())?;
    let command_comm = readfiles::command::read_comm_config_file(&cli.get_cmd_path())?;

    // 将配置和命令转换为 rsssh 模块中所需的类型
    let configs: Vec<rsssh::Config> = convert_config(user_configs);
    let commands: Vec<rsssh::Comm> = convert_comm(command_comm);

    println!("连接信息：{:?}", configs);
    println!("命令列表：{:?}", commands);

    // 执行命令
    rsssh::execute_commands(&configs, &commands).await?;

    Ok(())
}


